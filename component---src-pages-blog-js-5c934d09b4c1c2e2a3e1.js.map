{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.string.small.js","webpack:///./node_modules/core-js/modules/es6.array.find-index.js","webpack:///./src/pages/blog.js"],"names":["createHTML","this","$export","$find","KEY","forced","Array","P","F","findIndex","callbackfn","arguments","length","undefined","BlogLink","designTokens","text","size","large","colours","accent","Tag","small","Article","PostContainer","BlogIndex","data","location","useState","selectedTags","setSelectedTags","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","filter","post","tags","node","frontmatter","includedInFilter","tag","includes","to","map","onClick","tagToRemove","t","newTags","slice","splice","fields","slug","key","date","pageQuery"],"mappings":"6FAEA,EAAQ,OAAR,CAA0B,SAAS,SAAUA,GAC3C,OAAO,WACL,OAAOA,EAAWC,KAAM,QAAS,GAAI,S,kCCFzC,IAAIC,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,OAAR,CAA4B,GACpCC,EAAM,YACNC,GAAS,EAETD,IAAO,IAAIE,MAAM,GAAGF,IAAK,WAAcC,GAAS,KACpDH,EAAQA,EAAQK,EAAIL,EAAQM,EAAIH,EAAQ,QAAS,CAC/CI,UAAW,SAAmBC,GAC5B,OAAOP,EAAMF,KAAMS,EAAYC,UAAUC,OAAS,EAAID,UAAU,QAAKE,MAGzE,EAAQ,OAAR,CAAiCT,I,8mBCJjC,IAAMU,EAAW,YAAO,MAAP,qBAAH,gEAKGC,IAAaC,KAAKC,KAAKC,MAL1B,4BAQDH,IAAaI,QAAQC,OARpB,KAYRC,EAAM,YAAO,SAAP,qBAAH,gEAIaN,IAAaI,QAAQC,OAJlC,8BAMML,IAAaC,KAAKC,KAAKK,MAN7B,iDAYHC,EAAU,YAAO,UAAP,qBAAH,6CAIPC,EAAgB,YAAO,MAAP,qBAAH,4CA0EJC,UAtEG,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAAe,EACAC,mBAAS,IAA1CC,EADiC,KACnBC,EADmB,KAElCC,EAAYL,EAAKM,KAAKC,aAAaC,MACnCC,EAAQT,EAAKU,kBAAkBC,MAAMC,QAAO,SAAAC,GAChD,IAAMC,EAAOD,EAAKE,KAAKC,YAAYF,KAC/BG,GAAmB,EACvB,EAAgBd,EAAhB,wDAA8B,CAAC,IAAD,oFAArBe,EAAqB,EAC5B,IAAKJ,EAAKK,SAASD,GAAM,CACvBD,GAAmB,EACnB,OAGJ,OAAOA,KAGT,OACE,YAAC,IAAD,CAAQhB,SAAUA,EAAUO,MAAOH,GACjC,YAAC,IAAD,CAAKG,MAAM,mBACX,0BACE,YAAC,IAAD,KACE,YAAC,IAAD,KAAY,YAAC,OAAD,CAAMY,GAAG,KAAT,SACZ,YAAC,IAAD,KAAY,YAAC,OAAD,CAAMA,GAAG,UAAT,YAGhB,YAAC,IAAD,KACE,8BACA,uBACGjB,EAAakB,KAAI,SAAAH,GAAG,OACnB,YAACvB,EAAD,CAAK2B,QAAS,WACZ,IAAMC,EAAcpB,EAAapB,WAAU,SAAAyC,GAAC,OAAIA,IAAMN,KACtD,GAAIK,GAAe,EAAG,CACpB,IAAME,EAAUtB,EAAauB,QAC7BD,EAAQE,OAAOJ,EAAa,GAC5BnB,EAAgBqB,MALpB,KAOMP,OAGV,YAACpB,EAAD,KACGW,EAAMY,KAAI,YAAe,IAAZN,EAAW,EAAXA,KACND,EAAOC,EAAKC,YAAYF,MAAQ,GAChCN,EAAQO,EAAKC,YAAYR,OAASO,EAAKa,OAAOC,KACpD,OACE,YAAChC,EAAD,CAASiC,IAAKf,EAAKa,OAAOC,MACxB,0BACE,YAACzC,EAAD,KACE,YAAC,OAAD,CAAMgC,GAAIL,EAAKa,OAAOC,MACnBrB,IAGL,yBAAQO,EAAKC,YAAYe,MACzB,uBACGjB,EAAKO,KAAI,SAAAH,GAAG,OACX,YAACvB,EAAD,CAAK2B,QAAS,WACPnB,EAAagB,SAASD,IACzBd,EAAgB,GAAD,SAAMD,GAAN,CAAoBe,OAEnCA,gBAenB,IAAMc,EAAS","file":"component---src-pages-blog-js-5c934d09b4c1c2e2a3e1.js","sourcesContent":["'use strict';\n// B.2.3.11 String.prototype.small()\nrequire('./_string-html')('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","import React, {useState} from \"react\";\nimport { graphql, Link } from \"gatsby\";\nimport styled from \"@emotion/styled\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nimport { ContentContainer, designTokens, Header, HeaderLink } from \"../utils/style\";\n\nconst BlogLink = styled(\"div\")`\n  a {\n    color: black;\n    text-decoration: none;\n    font-weight: 500;\n    font-size: ${designTokens.text.size.large};\n  }\n  a:hover, a:active {\n    color: ${designTokens.colours.accent}\n  }\n`;\n\nconst Tag = styled(\"button\")`\n  color: white;\n  border-radius: 10%;\n  padding: 0 4px;\n  background-color: ${designTokens.colours.accent};\n  font-weight: 500;\n  font-size: ${designTokens.text.size.small};\n  margin-right: 8px;\n  cursor: pointer;\n  border: none;\n`;\n\nconst Article = styled(\"article\")`\n  margin-bottom: 24px;\n`;\n\nconst PostContainer = styled(\"div\")`\n  margin-top: 24px;\n`;\n\nconst BlogIndex = ({ data, location }) => {\n  const [selectedTags, setSelectedTags] = useState([]);\n  const siteTitle = data.site.siteMetadata.title;\n  const posts = data.allMarkdownRemark.edges.filter(post => {\n    const tags = post.node.frontmatter.tags;\n    let includedInFilter = true;\n    for (let tag of selectedTags) {\n      if (!tags.includes(tag)) {\n        includedInFilter = false;\n        break;\n      }\n    }\n    return includedInFilter;\n  });\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"Natalie's Blog\" />\n      <header>\n        <Header>\n          <HeaderLink><Link to=\"/\">Home</Link></HeaderLink>\n          <HeaderLink><Link to=\"/about\">About</Link></HeaderLink>\n        </Header>\n      </header>\n      <ContentContainer>\n        <h1>Blog</h1>\n        <div>\n          {selectedTags.map(tag => (\n            <Tag onClick={() => {\n              const tagToRemove = selectedTags.findIndex(t => t === tag);\n              if (tagToRemove >= 0) {\n                const newTags = selectedTags.slice();\n                newTags.splice(tagToRemove, 1);\n                setSelectedTags(newTags);\n              } \n            }}>x {tag}</Tag>\n          ))}\n        </div>\n        <PostContainer>\n          {posts.map(({ node }) => {\n            const tags = node.frontmatter.tags || [];\n            const title = node.frontmatter.title || node.fields.slug;\n            return (\n              <Article key={node.fields.slug}>\n                <header>\n                  <BlogLink>\n                    <Link to={node.fields.slug}>\n                      {title}\n                    </Link>\n                  </BlogLink>\n                  <small>{node.frontmatter.date}</small>\n                  <div>\n                    {tags.map(tag => (\n                      <Tag onClick={() => {\n                        if (!selectedTags.includes(tag)) {\n                          setSelectedTags([ ...selectedTags, tag ]);\n                        } \n                      }}>{tag}</Tag>\n                    ))}\n                  </div>\n                </header>\n              </Article>\n            )\n          })}\n        </PostContainer>\n      </ContentContainer>\n    </Layout>\n  );\n}\n\nexport default BlogIndex;\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}