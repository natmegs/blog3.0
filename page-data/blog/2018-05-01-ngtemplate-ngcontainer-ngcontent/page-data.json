{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/2018-05-01-ngtemplate-ngcontainer-ngcontent/","result":{"data":{"site":{"siteMetadata":{"title":"Natalie's Blog"}},"markdownRemark":{"id":"f4d0ef94-b409-50d5-bbb4-2edce070b3e3","excerpt":",  and  are all Angular elements used for rendering HTML, but what do they actually do? Why do we need three, and why can’t I just use regular HTML elements…","html":"<p><span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span>, <span class=\"code\"><code class=\"language-text\">&lt;ng-container&gt;</code></span> and <span class=\"code\"><code class=\"language-text\">&lt;ng-content&gt;</code></span> are all Angular elements used for rendering HTML, but what do they actually do? Why do we need three, and why can’t I just use regular HTML elements like divs? I’ve been burned and confused by these elements in the past so I endeavoured to try to understand the reasoning behind them.</p>\n<h3><code class=\"language-text\">&lt;ng-template&gt;</code></h3>\n<p>Ever seen <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span>s in a code base and thought they looked cool, so you put some HTML into one to try to look cool too, only to be completely baffled by why it wasn’t showing up on the screen or in the DOM? Only me? Cool…</p>\n<p>The ng-template element is conceptually similar to the HTML <span class=\"code\"><code class=\"language-text\">&lt;template&gt;</code></span> element. From <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template\">MDN</a>:</p>\n<p>“The HTML <code class=\"language-text\">&lt;template&gt;</code> element is a mechanism for holding client-side content that is not to be rendered when a page is loaded but may subsequently be instantiated during runtime using Javascript.”</p>\n<p>So why would we ever want to write HTML that’s not rendered on page load? A really good use case is when creating reusable templates that can be used as needed and instantiated dynamically based on data or other input retrieved at runtime. </p>\n<p>The same concepts apply to Angular’s <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span>. If you put some HTML inside of an <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span> tag, it not only won’t be on the screen, but it won’t be in the DOM either. Angular will replace the <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span> tag and its contents with a comment. The key is that <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span>s will only be displayed if used in partnership with a structural directive. We need something to tell Angular that we want to use this template. This can be easily accomplished using template variables.</p>\n<p><div id=\"gist85270356\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-app-template-html\" class=\"file\">\n    \n\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-html \">\n      \n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\">\n      <tr>\n        <td id=\"file-app-template-html-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"></td>\n        <td id=\"file-app-template-html-LC1\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">ng-template</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"></td>\n        <td id=\"file-app-template-html-LC2\" class=\"blob-code blob-code-inner js-file-line\">\tYou will never see me :(</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"></td>\n        <td id=\"file-app-template-html-LC3\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">ng-template</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"></td>\n        <td id=\"file-app-template-html-LC4\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\"></td>\n        <td id=\"file-app-template-html-LC5\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">ng-template</span> <span class=\"pl-e\">*ngIf</span>=<span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>showContents<span class=\"pl-pds\">&quot;</span></span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L6\" class=\"blob-num js-line-number\" data-line-number=\"6\"></td>\n        <td id=\"file-app-template-html-LC6\" class=\"blob-code blob-code-inner js-file-line\">\tYou still won’t see me (even though I’m using a structural directive, there’s nothing that&#39;s telling Angular to use me)</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L7\" class=\"blob-num js-line-number\" data-line-number=\"7\"></td>\n        <td id=\"file-app-template-html-LC7\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">ng-template</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L8\" class=\"blob-num js-line-number\" data-line-number=\"8\"></td>\n        <td id=\"file-app-template-html-LC8\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L9\" class=\"blob-num js-line-number\" data-line-number=\"9\"></td>\n        <td id=\"file-app-template-html-LC9\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">ng-template</span> <span class=\"pl-e\">*ngFor</span>=<span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>let item of items<span class=\"pl-pds\">&quot;</span></span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L10\" class=\"blob-num js-line-number\" data-line-number=\"10\"></td>\n        <td id=\"file-app-template-html-LC10\" class=\"blob-code blob-code-inner js-file-line\">\tNo dice (same reason as *ngIf above)</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L11\" class=\"blob-num js-line-number\" data-line-number=\"11\"></td>\n        <td id=\"file-app-template-html-LC11\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">ng-template</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L12\" class=\"blob-num js-line-number\" data-line-number=\"12\"></td>\n        <td id=\"file-app-template-html-LC12\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L13\" class=\"blob-num js-line-number\" data-line-number=\"13\"></td>\n        <td id=\"file-app-template-html-LC13\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">div</span> <span class=\"pl-e\">*ngIf</span>=<span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>!showTemplate else template<span class=\"pl-pds\">&quot;</span></span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L14\" class=\"blob-num js-line-number\" data-line-number=\"14\"></td>\n        <td id=\"file-app-template-html-LC14\" class=\"blob-code blob-code-inner js-file-line\">\tHello</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L15\" class=\"blob-num js-line-number\" data-line-number=\"15\"></td>\n        <td id=\"file-app-template-html-LC15\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">div</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L16\" class=\"blob-num js-line-number\" data-line-number=\"16\"></td>\n        <td id=\"file-app-template-html-LC16\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L17\" class=\"blob-num js-line-number\" data-line-number=\"17\"></td>\n        <td id=\"file-app-template-html-LC17\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">ng-template</span> <span class=\"pl-e\">#template</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L18\" class=\"blob-num js-line-number\" data-line-number=\"18\"></td>\n        <td id=\"file-app-template-html-LC18\" class=\"blob-code blob-code-inner js-file-line\">\tFinally I am seen! (When showTemplate is true)</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L19\" class=\"blob-num js-line-number\" data-line-number=\"19\"></td>\n        <td id=\"file-app-template-html-LC19\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">ng-template</span>&gt;</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/natmegs/11d06af1ad6f85960eb608ed03c3ea5a/raw/96f32c9a27c9f48318646c4cb2c3adf5835604e4/app.template.html\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/natmegs/11d06af1ad6f85960eb608ed03c3ea5a#file-app-template-html\">app.template.html</a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<script src=\"https://gist.github.com/natmegs/11d06af1ad6f85960eb608ed03c3ea5a.js\"></script>\n<p>So just putting a structural directive on an <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span> isn’t enough to tell Angular we want to use the template, but we can use other elements to specify when they want to show our <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span> by attaching our <span class=\"code\">#template</span> local template variable.</p>\n<p>A rendered <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span> doesn’t itself get turned into a DOM element, only the contents are rendered to the DOM. So when the above example is rendered, the <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span> wrapper element does not get turned into a DOM element in the same way a container div would; only the content text ends up on the DOM.</p>\n<h3><code class=\"language-text\">&lt;ng-container&gt;</code></h3>\n<p><span class=\"code\"><code class=\"language-text\">&lt;ng-container&gt;</code></span> is an Angular grouping element that is similar to <span class=\"code\"><code class=\"language-text\">&lt;ng-container&gt;</code></span> in that it doesn’t represent a DOM element. The difference is that it will always be rendered, whereas an <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span> will only be rendered if it is explicitly requested. <span class=\"code\"><code class=\"language-text\">&lt;ng-container&gt;</code></span>s are useful anywhere you need an extra container for some template elements, but don’t want to (or can’t) create a container such as a div to hold them with due to syntax or style constraints.</p>\n<p>For example, it is not allowed in Angular to put two structural directives on the same element. If you needed to loop through an array and display a <span class=\"code\"><code class=\"language-text\">&lt;tr&gt;</code></span> for each element, but only if a different condition was met, you may want to put both an *ngFor and *ngIf on the <span class=\"code\"><code class=\"language-text\">&lt;tr&gt;</code></span> element. Angular does not allow this, however, and wrapping the <span class=\"code\"><code class=\"language-text\">&lt;tr&gt;</code></span> in a <span class=\"code\"><code class=\"language-text\">&lt;div&gt;</code></span> to hold one of the structural directives is not valid HTML. The utility of <span class=\"code\"><code class=\"language-text\">&lt;ng-container&gt;</code></span> shines here, where we can use the <span class=\"code\"><code class=\"language-text\">&lt;ng-container&gt;</code></span> to hold a structural directive and contain the <span class=\"code\"><code class=\"language-text\">&lt;tr&gt;&lt;</code>/span> without breaking the HTML layout.</p>\n<p><div id=\"gist85270408\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-app-template-html\" class=\"file\">\n    \n\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-html \">\n      \n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\">\n      <tr>\n        <td id=\"file-app-template-html-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"></td>\n        <td id=\"file-app-template-html-LC1\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">ng-container</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"></td>\n        <td id=\"file-app-template-html-LC2\" class=\"blob-code blob-code-inner js-file-line\">  You can see me! (Without any help from structural directives)</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"></td>\n        <td id=\"file-app-template-html-LC3\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">ng-container</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"></td>\n        <td id=\"file-app-template-html-LC4\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\"></td>\n        <td id=\"file-app-template-html-LC5\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">table</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L6\" class=\"blob-num js-line-number\" data-line-number=\"6\"></td>\n        <td id=\"file-app-template-html-LC6\" class=\"blob-code blob-code-inner js-file-line\">  &lt;<span class=\"pl-ent\">tbody</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L7\" class=\"blob-num js-line-number\" data-line-number=\"7\"></td>\n        <td id=\"file-app-template-html-LC7\" class=\"blob-code blob-code-inner js-file-line\">    &lt;<span class=\"pl-ent\">ng-container</span> <span class=\"pl-e\">*ngFor</span>=<span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>let item of items<span class=\"pl-pds\">&quot;</span></span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L8\" class=\"blob-num js-line-number\" data-line-number=\"8\"></td>\n        <td id=\"file-app-template-html-LC8\" class=\"blob-code blob-code-inner js-file-line\">      &lt;<span class=\"pl-ent\">tr</span> <span class=\"pl-e\">*ngIf</span>=<span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>item &gt; 1<span class=\"pl-pds\">&quot;</span></span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L9\" class=\"blob-num js-line-number\" data-line-number=\"9\"></td>\n        <td id=\"file-app-template-html-LC9\" class=\"blob-code blob-code-inner js-file-line\">        &lt;<span class=\"pl-ent\">td</span>&gt;{{item}}&lt;/<span class=\"pl-ent\">td</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L10\" class=\"blob-num js-line-number\" data-line-number=\"10\"></td>\n        <td id=\"file-app-template-html-LC10\" class=\"blob-code blob-code-inner js-file-line\">      &lt;/<span class=\"pl-ent\">tr</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L11\" class=\"blob-num js-line-number\" data-line-number=\"11\"></td>\n        <td id=\"file-app-template-html-LC11\" class=\"blob-code blob-code-inner js-file-line\">    &lt;/<span class=\"pl-ent\">ng-container</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L12\" class=\"blob-num js-line-number\" data-line-number=\"12\"></td>\n        <td id=\"file-app-template-html-LC12\" class=\"blob-code blob-code-inner js-file-line\">  &lt;/<span class=\"pl-ent\">tbody</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L13\" class=\"blob-num js-line-number\" data-line-number=\"13\"></td>\n        <td id=\"file-app-template-html-LC13\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">table</span>&gt;</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/natmegs/eeb671314212e1b141aafdb120d5cb2c/raw/eb7c8bb0cddf9464c9024673198b901a6b86dfc5/app.template.html\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/natmegs/eeb671314212e1b141aafdb120d5cb2c#file-app-template-html\">app.template.html</a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<script src=\"https://gist.github.com/natmegs/eeb671314212e1b141aafdb120d5cb2c.js\"></script>\n<p>And despite the fact that the <span class=\"code\"><code class=\"language-text\">&lt;ng-container&gt;</code></span> will always be rendered, even if the item doesn’t meet the inner condition, no extra elements will be added to the DOM since the <span class=\"code\"><code class=\"language-text\">&lt;ng-container&gt;</code></span> alone doesn’t represent a DOM element.</p>\n<h3>ngTemplateOutlet</h3>\n<p>We can bring together the <span class=\"code\"><code class=\"language-text\">&lt;ng-container&gt;</code></span> and <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span> elements using the <span class=\"code\">*ngTemplateOutlet</span> structural directive. This directive allows us to instantiate a <span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span> anywhere on the page.</p>\n<p><div id=\"gist85270618\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-app-template-html\" class=\"file\">\n    \n\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-html \">\n      \n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\">\n      <tr>\n        <td id=\"file-app-template-html-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"></td>\n        <td id=\"file-app-template-html-LC1\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">ng-container</span> <span class=\"pl-e\">*ngTemplateOutlet</span>=<span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>template<span class=\"pl-pds\">&quot;</span></span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"></td>\n        <td id=\"file-app-template-html-LC2\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">ng-container</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"></td>\n        <td id=\"file-app-template-html-LC3\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"></td>\n        <td id=\"file-app-template-html-LC4\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">ng-template</span> <span class=\"pl-e\">#template</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\"></td>\n        <td id=\"file-app-template-html-LC5\" class=\"blob-code blob-code-inner js-file-line\">\tHello!</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L6\" class=\"blob-num js-line-number\" data-line-number=\"6\"></td>\n        <td id=\"file-app-template-html-LC6\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">ng-template</span>&gt;</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/natmegs/01df668e02ea3ecc3d937ee3ea92e478/raw/19deac83e93f4c28d2c36bc31a02ca1a50194b9f/app.template.html\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/natmegs/01df668e02ea3ecc3d937ee3ea92e478#file-app-template-html\">app.template.html</a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<script src=\"https://gist.github.com/natmegs/01df668e02ea3ecc3d937ee3ea92e478.js\"></script>\n<p>Placing this directive on an <span class=\"code\"><code class=\"language-text\">&lt;ng-container&gt;</code></span> element allows us to place an instance of a template wherever we need it. <span class=\"code\">*ngTemplateOutlet</span> can also take a context object as input, which becomes available for binding by the local template let declarations.</p>\n<p><div id=\"gist85270638\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-app-template-html\" class=\"file\">\n    \n\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-html \">\n      \n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\">\n      <tr>\n        <td id=\"file-app-template-html-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"></td>\n        <td id=\"file-app-template-html-LC1\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">ng-container</span> <span class=\"pl-e\">*ngTemplateOutlet</span>=<span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>template; context: contextObj<span class=\"pl-pds\">&quot;</span></span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"></td>\n        <td id=\"file-app-template-html-LC2\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">ng-container</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"></td>\n        <td id=\"file-app-template-html-LC3\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"></td>\n        <td id=\"file-app-template-html-LC4\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">ng-template</span> <span class=\"pl-e\">#template</span> <span class=\"pl-e\">let-food</span>=<span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>donut<span class=\"pl-pds\">&quot;</span></span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\"></td>\n        <td id=\"file-app-template-html-LC5\" class=\"blob-code blob-code-inner js-file-line\">\t{{food}}</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L6\" class=\"blob-num js-line-number\" data-line-number=\"6\"></td>\n        <td id=\"file-app-template-html-LC6\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">ng-template</span>&gt;</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/natmegs/c1b52a1d2084b9cb299df6262159ae5d/raw/3845bad0c65ebd00359be79791be7df6d36c615f/app.template.html\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/natmegs/c1b52a1d2084b9cb299df6262159ae5d#file-app-template-html\">app.template.html</a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<p><div id=\"gist85270662\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-app-component-ts\" class=\"file\">\n    \n\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-typescript \">\n      \n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\">\n      <tr>\n        <td id=\"file-app-component-ts-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"></td>\n        <td id=\"file-app-component-ts-LC1\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-component-ts-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"></td>\n        <td id=\"file-app-component-ts-LC2\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-smi\">contextObj</span> <span class=\"pl-k\">=</span> {</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-component-ts-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"></td>\n        <td id=\"file-app-component-ts-LC3\" class=\"blob-code blob-code-inner js-file-line\">  donut: <span class=\"pl-s\"><span class=\"pl-pds\">&quot;</span>Old fashioned glazed<span class=\"pl-pds\">&quot;</span></span></td>\n      </tr>\n      <tr>\n        <td id=\"file-app-component-ts-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"></td>\n        <td id=\"file-app-component-ts-LC4\" class=\"blob-code blob-code-inner js-file-line\">};</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/natmegs/74c1999693abbfe987c3fea4b9c23680/raw/3ff71ae7e0b80d743e60918ce1da4b961a77c54d/app.component.ts\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/natmegs/74c1999693abbfe987c3fea4b9c23680#file-app-component-ts\">app.component.ts</a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<script src=\"https://gist.github.com/natmegs/c1b52a1d2084b9cb299df6262159ae5d.js\"></script>\n<script src=\"https://gist.github.com/natmegs/74c1999693abbfe987c3fea4b9c23680.js\"></script>\n<h3><code class=\"language-text\">&lt;ng-content&gt;</code></h3>\n<p><span class=\"code\"><code class=\"language-text\">&lt;ng-template&gt;</code></span>, <span class=\"code\"><code class=\"language-text\">&lt;ng-container&gt;</code></span>, and<span class=\"code\">ngTemplateOutlet</span> are all used (sometimes in combination) to instantiate and place HTML templates in a view, and <span class=\"code\"><code class=\"language-text\">&lt;ng-content&gt;</code></span> serves a similar role in a slightly different way. <span class=\"code\"><code class=\"language-text\">&lt;ng-content&gt;</code></span> is used for projecting content into components. Any component that will accept other components between its opening and closing tags will use an <span class=\"code\"><code class=\"language-text\">&lt;ng-content&gt;</code></span> to indicate where that content should be placed.</p>\n<p>If we create a SomeComponent component, we can indicate that it can take projected content by using the <span class=\"code\"><code class=\"language-text\">&lt;ng-content&gt;</code></span> tag to indicate where the projected content should go.</p>\n<p><div id=\"gist85270691\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-some-component-template-html\" class=\"file\">\n    \n\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-html \">\n      \n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\">\n      <tr>\n        <td id=\"file-some-component-template-html-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"></td>\n        <td id=\"file-some-component-template-html-LC1\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">h1</span>&gt;Above the projected content&lt;/<span class=\"pl-ent\">h1</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-some-component-template-html-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"></td>\n        <td id=\"file-some-component-template-html-LC2\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">ng-content</span>&gt;&lt;/<span class=\"pl-ent\">ng-content</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-some-component-template-html-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"></td>\n        <td id=\"file-some-component-template-html-LC3\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">p</span>&gt;Below the projected content&lt;/<span class=\"pl-ent\">p</span>&gt;</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/natmegs/b378834479a4b4db7a063e6943032dbe/raw/9ec3c2368163dadeb4ec8dd9f7622500408073fb/some-component.template.html\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/natmegs/b378834479a4b4db7a063e6943032dbe#file-some-component-template-html\">some-component.template.html</a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<script src=\"https://gist.github.com/natmegs/b378834479a4b4db7a063e6943032dbe.js\"></script>\n<p>And then wherever we use SomeComponent, we can insert any template elements between its opening and closing tags as the projected content.</p>\n<p><div id=\"gist85270706\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-app-template-html\" class=\"file\">\n    \n\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper data type-html \">\n      \n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\">\n      <tr>\n        <td id=\"file-app-template-html-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"></td>\n        <td id=\"file-app-template-html-LC1\" class=\"blob-code blob-code-inner js-file-line\">&lt;<span class=\"pl-ent\">some-component</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"></td>\n        <td id=\"file-app-template-html-LC2\" class=\"blob-code blob-code-inner js-file-line\"> &lt;<span class=\"pl-ent\">h3</span>&gt;I am the projected content!&lt;/<span class=\"pl-ent\">h3</span>&gt;</td>\n      </tr>\n      <tr>\n        <td id=\"file-app-template-html-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"></td>\n        <td id=\"file-app-template-html-LC3\" class=\"blob-code blob-code-inner js-file-line\">&lt;/<span class=\"pl-ent\">some-component</span>&gt;</td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/natmegs/204622e774de4e9e3d332ba91888cf37/raw/6a2b264ac5632dbbab03b1aaef261e16077387de/app.template.html\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/natmegs/204622e774de4e9e3d332ba91888cf37#file-app-template-html\">app.template.html</a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<script src=\"https://gist.github.com/natmegs/204622e774de4e9e3d332ba91888cf37.js\"></script>","frontmatter":{"title":"ng-template, ng-container, and ng-content in Angular","date":"May 01, 2018","description":"Rendering HTML with Angular elements."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2018-05-01-ngtemplate-ngcontainer-ngcontent/","previous":{"fields":{"slug":"/blog/2018-04-30-viewchild-contentchild-angular/"},"frontmatter":{"title":"ViewChild(ren) and ContentChild(ren) in Angular"}},"next":{"fields":{"slug":"/blog/2018-05-01-sqlserver-node-sequelize/"},"frontmatter":{"title":"SQL Server and Node with Sequelize"}}}}}